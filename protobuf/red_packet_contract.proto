/**
  * RedPacketContract.proto
 **/
syntax = "proto3";

import "aelf/core.proto";
import "aelf/options.proto";

import "google/protobuf/empty.proto";

option csharp_namespace = "Portkey.Contracts.RedPacket";

service RedPacketContract {

    option (aelf.csharp_state) = "Portkey.Contracts.RedPacket.RedPacketContractState";

    rpc Initialize(InitializeInput) returns (google.protobuf.Empty){}

    rpc CreateRedPacket (CreateRedPacketInput) returns (google.protobuf.Empty) {}

    rpc TransferRedPacket (TransferRedPacketBatchInput) returns (google.protobuf.Empty) {}
    
    rpc GetRedPacketInfo (GetRedPacketInput) returns (RedPacketOutput) {}
    
    rpc GetRedPacketMaxCount (google.protobuf.Empty) returns (RedPacketMaxCountOutput) {}
    
    rpc SetRedPacketMaxCount (SetRedPacketMaxCountInput) returns (google.protobuf.Empty) {}
    
    rpc RefundRedPacket (RefundRedPacketInput) returns (google.protobuf.Empty) {}
    
}


message CreateRedPacketInput{
    string red_packet_id = 1;
    string red_packet_symbol = 2;
    int64 total_amount = 3;
    int64 min_amount = 4;
    int64 expiration_time = 5;
    int64 total_count = 6;
    RedPacketType red_packet_type = 7;
    string public_key = 8;
    string red_packet_signature = 9;
    aelf.Address sender_address = 10;
}

message TransferRedPacketInput{
    int64 amount = 1;
    aelf.Address receiver_address = 2;
    string red_packet_signature = 3;
}

message TransferRedPacketBatchInput{
    string red_packet_id = 1;
    repeated TransferRedPacketInput transfer_red_packet_inputs = 2;
}

enum RedPacketType {
    UNKNOWN = 0;
    FIXED = 1;
    RANDOM = 2;
    QUICK_TRANSFER = 3;
}

message RedPacketInfo {
    string red_packet_id = 1;
    string red_packet_symbol = 2;
    int64 total_amount = 3;
    int64 expiration_time = 4;
    int64 total_count = 5;
    RedPacketType red_packet_type = 6;
    aelf.Address sender_address = 7;
    string public_key = 8;
}

message RedPacketCreated{
    option (aelf.is_event) = true;
    aelf.Address sender_address = 1;
    string red_packet_id = 2;
    string red_packet_symbol = 3;
    int64 total_amount = 4;
    int64 total_count = 5;
    RedPacketType red_packet_type = 6;
    aelf.Address receiver_address = 7;

}

message AddressList{
    repeated aelf.Address addresses = 1;
}

message RedPacketReceived{
    option (aelf.is_event) = true;
    aelf.Address sender_address = 1;
    string red_packet_id = 2;
    string red_packet_symbol = 3;
    int64 amount = 4;
    aelf.Address receiver_address = 5;
    bool is_success = 6;
}

message InitializeInput{
    aelf.Address contract_admin = 1;
    int64 max_count = 2;
    
}

message RedPacketOutput {
   RedPacketInfo red_packet_info = 1;
}

message GetRedPacketInput {
    string red_packet_id = 1;
}

message RedPacketMaxCountOutput {
    int64 max_count = 1;
}

message SetRedPacketMaxCountInput {
    int64 max_count = 1;
}

message RefundRedPacketInput{
    string red_packet_id = 1;
    int64 amount = 2;
    string red_packet_signature = 3;
}

message RedPacketRefunded{
    option (aelf.is_event) = true;
    string red_packet_id = 1;
    aelf.Address refund_address = 2;
    string red_packet_symbol = 3;
    int64 amount = 4;
}





